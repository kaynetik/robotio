// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: robot_simulator.proto

package robotsimulator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RobotSimulator_MoveRobot_FullMethodName     = "/robotsimulator.RobotSimulator/MoveRobot"
	RobotSimulator_GetSensorData_FullMethodName = "/robotsimulator.RobotSimulator/GetSensorData"
)

// RobotSimulatorClient is the client API for RobotSimulator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RobotSimulatorClient interface {
	MoveRobot(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MoveRequest, MoveResponse], error)
	GetSensorData(ctx context.Context, in *SensorRequest, opts ...grpc.CallOption) (*SensorResponse, error)
}

type robotSimulatorClient struct {
	cc grpc.ClientConnInterface
}

func NewRobotSimulatorClient(cc grpc.ClientConnInterface) RobotSimulatorClient {
	return &robotSimulatorClient{cc}
}

func (c *robotSimulatorClient) MoveRobot(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MoveRequest, MoveResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RobotSimulator_ServiceDesc.Streams[0], RobotSimulator_MoveRobot_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MoveRequest, MoveResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RobotSimulator_MoveRobotClient = grpc.BidiStreamingClient[MoveRequest, MoveResponse]

func (c *robotSimulatorClient) GetSensorData(ctx context.Context, in *SensorRequest, opts ...grpc.CallOption) (*SensorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SensorResponse)
	err := c.cc.Invoke(ctx, RobotSimulator_GetSensorData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RobotSimulatorServer is the server API for RobotSimulator service.
// All implementations must embed UnimplementedRobotSimulatorServer
// for forward compatibility.
type RobotSimulatorServer interface {
	MoveRobot(grpc.BidiStreamingServer[MoveRequest, MoveResponse]) error
	GetSensorData(context.Context, *SensorRequest) (*SensorResponse, error)
	mustEmbedUnimplementedRobotSimulatorServer()
}

// UnimplementedRobotSimulatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRobotSimulatorServer struct{}

func (UnimplementedRobotSimulatorServer) MoveRobot(grpc.BidiStreamingServer[MoveRequest, MoveResponse]) error {
	return status.Errorf(codes.Unimplemented, "method MoveRobot not implemented")
}
func (UnimplementedRobotSimulatorServer) GetSensorData(context.Context, *SensorRequest) (*SensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensorData not implemented")
}
func (UnimplementedRobotSimulatorServer) mustEmbedUnimplementedRobotSimulatorServer() {}
func (UnimplementedRobotSimulatorServer) testEmbeddedByValue()                        {}

// UnsafeRobotSimulatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RobotSimulatorServer will
// result in compilation errors.
type UnsafeRobotSimulatorServer interface {
	mustEmbedUnimplementedRobotSimulatorServer()
}

func RegisterRobotSimulatorServer(s grpc.ServiceRegistrar, srv RobotSimulatorServer) {
	// If the following call pancis, it indicates UnimplementedRobotSimulatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RobotSimulator_ServiceDesc, srv)
}

func _RobotSimulator_MoveRobot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RobotSimulatorServer).MoveRobot(&grpc.GenericServerStream[MoveRequest, MoveResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RobotSimulator_MoveRobotServer = grpc.BidiStreamingServer[MoveRequest, MoveResponse]

func _RobotSimulator_GetSensorData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotSimulatorServer).GetSensorData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RobotSimulator_GetSensorData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotSimulatorServer).GetSensorData(ctx, req.(*SensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RobotSimulator_ServiceDesc is the grpc.ServiceDesc for RobotSimulator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RobotSimulator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "robotsimulator.RobotSimulator",
	HandlerType: (*RobotSimulatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSensorData",
			Handler:    _RobotSimulator_GetSensorData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MoveRobot",
			Handler:       _RobotSimulator_MoveRobot_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "robot_simulator.proto",
}
